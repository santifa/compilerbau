/*
* generated by Xtext
*/
package org.xtext.mgpl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MgplDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttrAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttrAttrListParserRuleCall_3_0 = (RuleCall)cAttrAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeclAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclDeclarationParserRuleCall_5_0 = (RuleCall)cDeclAssignment_5.eContents().get(0);
		private final Assignment cStmtAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStmtStatementBlockParserRuleCall_6_0 = (RuleCall)cStmtAssignment_6.eContents().get(0);
		private final Assignment cBlocksAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlocksBlockParserRuleCall_7_0 = (RuleCall)cBlocksAssignment_7.eContents().get(0);
		
		//Model:
		//	"game" name=ID "(" attr=AttrList ")" decl+=Declaration* stmt=StatementBlock blocks+=Block*;
		public ParserRule getRule() { return rule; }

		//"game" name=ID "(" attr=AttrList ")" decl+=Declaration* stmt=StatementBlock blocks+=Block*
		public Group getGroup() { return cGroup; }

		//"game"
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//attr=AttrList
		public Assignment getAttrAssignment_3() { return cAttrAssignment_3; }

		//AttrList
		public RuleCall getAttrAttrListParserRuleCall_3_0() { return cAttrAttrListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//decl+=Declaration*
		public Assignment getDeclAssignment_5() { return cDeclAssignment_5; }

		//Declaration
		public RuleCall getDeclDeclarationParserRuleCall_5_0() { return cDeclDeclarationParserRuleCall_5_0; }

		//stmt=StatementBlock
		public Assignment getStmtAssignment_6() { return cStmtAssignment_6; }

		//StatementBlock
		public RuleCall getStmtStatementBlockParserRuleCall_6_0() { return cStmtStatementBlockParserRuleCall_6_0; }

		//blocks+=Block*
		public Assignment getBlocksAssignment_7() { return cBlocksAssignment_7; }

		//Block
		public RuleCall getBlocksBlockParserRuleCall_7_0() { return cBlocksBlockParserRuleCall_7_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cVariAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cVariVarDeclParserRuleCall_0_0_0 = (RuleCall)cVariAssignment_0_0.eContents().get(0);
		private final Assignment cObjAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cObjObjDeclParserRuleCall_0_1_0 = (RuleCall)cObjAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Declaration:
		//	(vari=VarDecl | obj=ObjDecl) ";";
		public ParserRule getRule() { return rule; }

		//(vari=VarDecl | obj=ObjDecl) ";"
		public Group getGroup() { return cGroup; }

		//vari=VarDecl | obj=ObjDecl
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//vari=VarDecl
		public Assignment getVariAssignment_0_0() { return cVariAssignment_0_0; }

		//VarDecl
		public RuleCall getVariVarDeclParserRuleCall_0_0_0() { return cVariVarDeclParserRuleCall_0_0_0; }

		//obj=ObjDecl
		public Assignment getObjAssignment_0_1() { return cObjAssignment_0_1; }

		//ObjDecl
		public RuleCall getObjObjDeclParserRuleCall_0_1_0() { return cObjObjDeclParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExprAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_2_0_1_0 = (RuleCall)cExprAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//VarDecl returns VARE:
		//	"int" name=ID (("=" expr=Expr)? | "[" value=INT "]");
		public ParserRule getRule() { return rule; }

		//"int" name=ID (("=" expr=Expr)? | "[" value=INT "]")
		public Group getGroup() { return cGroup; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" expr=Expr)? | "[" value=INT "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//("=" expr=Expr)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_0() { return cEqualsSignKeyword_2_0_0; }

		//expr=Expr
		public Assignment getExprAssignment_2_0_1() { return cExprAssignment_2_0_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0_1_0() { return cExprExprParserRuleCall_2_0_1_0; }

		//"[" value=INT "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//value=INT
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_1_0() { return cValueINTTerminalRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }
	}

	public class ObjDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeObjTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cAttrAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cAttrAttrListParserRuleCall_2_0_1_0 = (RuleCall)cAttrAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ObjDecl returns VARE:
		//	type=ObjType name=ID ("(" attr=AttrList ")" | "[" value=INT "]");
		public ParserRule getRule() { return rule; }

		//type=ObjType name=ID ("(" attr=AttrList ")" | "[" value=INT "]")
		public Group getGroup() { return cGroup; }

		//type=ObjType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ObjType
		public RuleCall getTypeObjTypeParserRuleCall_0_0() { return cTypeObjTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"(" attr=AttrList ")" | "[" value=INT "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"(" attr=AttrList ")"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }

		//attr=AttrList
		public Assignment getAttrAssignment_2_0_1() { return cAttrAssignment_2_0_1; }

		//AttrList
		public RuleCall getAttrAttrListParserRuleCall_2_0_1_0() { return cAttrAttrListParserRuleCall_2_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }

		//"[" value=INT "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//value=INT
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_1_0() { return cValueINTTerminalRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnimBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Block:
		//	AnimBlock | EventBlock;
		public ParserRule getRule() { return rule; }

		//AnimBlock | EventBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnimBlock
		public RuleCall getAnimBlockParserRuleCall_0() { return cAnimBlockParserRuleCall_0; }

		//EventBlock
		public RuleCall getEventBlockParserRuleCall_1() { return cEventBlockParserRuleCall_1; }
	}

	public class AnimBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnimBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnimationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeObjTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cObjNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjNameIDTerminalRuleCall_4_0 = (RuleCall)cObjNameAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStmtAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStmtStatementBlockParserRuleCall_6_0 = (RuleCall)cStmtAssignment_6.eContents().get(0);
		
		//AnimBlock:
		//	"animation" name=ID "(" type=ObjType objName=ID ")" stmt=StatementBlock;
		public ParserRule getRule() { return rule; }

		//"animation" name=ID "(" type=ObjType objName=ID ")" stmt=StatementBlock
		public Group getGroup() { return cGroup; }

		//"animation"
		public Keyword getAnimationKeyword_0() { return cAnimationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//type=ObjType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ObjType
		public RuleCall getTypeObjTypeParserRuleCall_3_0() { return cTypeObjTypeParserRuleCall_3_0; }

		//objName=ID
		public Assignment getObjNameAssignment_4() { return cObjNameAssignment_4; }

		//ID
		public RuleCall getObjNameIDTerminalRuleCall_4_0() { return cObjNameIDTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//stmt=StatementBlock
		public Assignment getStmtAssignment_6() { return cStmtAssignment_6; }

		//StatementBlock
		public RuleCall getStmtStatementBlockParserRuleCall_6_0() { return cStmtStatementBlockParserRuleCall_6_0; }
	}

	public class EventBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyKeystrokeParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Assignment cStmtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtStatementBlockParserRuleCall_2_0 = (RuleCall)cStmtAssignment_2.eContents().get(0);
		
		//EventBlock:
		//	"on" key=Keystroke stmt=StatementBlock;
		public ParserRule getRule() { return rule; }

		//"on" key=Keystroke stmt=StatementBlock
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//key=Keystroke
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//Keystroke
		public RuleCall getKeyKeystrokeParserRuleCall_1_0() { return cKeyKeystrokeParserRuleCall_1_0; }

		//stmt=StatementBlock
		public Assignment getStmtAssignment_2() { return cStmtAssignment_2; }

		//StatementBlock
		public RuleCall getStmtStatementBlockParserRuleCall_2_0() { return cStmtStatementBlockParserRuleCall_2_0; }
	}

	public class ObjTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRectangleKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTriangleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCircleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ObjType:
		//	"rectangle" | "triangle" | "circle";
		public ParserRule getRule() { return rule; }

		//"rectangle" | "triangle" | "circle"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"rectangle"
		public Keyword getRectangleKeyword_0() { return cRectangleKeyword_0; }

		//"triangle"
		public Keyword getTriangleKeyword_1() { return cTriangleKeyword_1; }

		//"circle"
		public Keyword getCircleKeyword_2() { return cCircleKeyword_2; }
	}

	public class KeystrokeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keystroke");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSpaceKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLeftarrowKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRightarrowKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUparrowKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDownarrowKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Keystroke:
		//	"space" | "leftarrow" | "rightarrow" | "uparrow" | "downarrow";
		public ParserRule getRule() { return rule; }

		//"space" | "leftarrow" | "rightarrow" | "uparrow" | "downarrow"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"space"
		public Keyword getSpaceKeyword_0() { return cSpaceKeyword_0; }

		//"leftarrow"
		public Keyword getLeftarrowKeyword_1() { return cLeftarrowKeyword_1; }

		//"rightarrow"
		public Keyword getRightarrowKeyword_2() { return cRightarrowKeyword_2; }

		//"uparrow"
		public Keyword getUparrowKeyword_3() { return cUparrowKeyword_3; }

		//"downarrow"
		public Keyword getDownarrowKeyword_4() { return cDownarrowKeyword_4; }
	}

	public class StatementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStmtAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStmtStmtParserRuleCall_1_1_0 = (RuleCall)cStmtAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//StatementBlock:
		//	{StatementBlock} ("{" stmt+=Stmt* "}");
		public ParserRule getRule() { return rule; }

		//{StatementBlock} ("{" stmt+=Stmt* "}")
		public Group getGroup() { return cGroup; }

		//{StatementBlock}
		public Action getStatementBlockAction_0() { return cStatementBlockAction_0; }

		//"{" stmt+=Stmt* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//stmt+=Stmt*
		public Assignment getStmtAssignment_1_1() { return cStmtAssignment_1_1; }

		//Stmt
		public RuleCall getStmtStmtParserRuleCall_1_1_0() { return cStmtStmtParserRuleCall_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Stmt:
		//	IfStmt | ForStmt | AssStmt;
		public ParserRule getRule() { return rule; }

		//IfStmt | ForStmt | AssStmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfStmt
		public RuleCall getIfStmtParserRuleCall_0() { return cIfStmtParserRuleCall_0; }

		//ForStmt
		public RuleCall getForStmtParserRuleCall_1() { return cForStmtParserRuleCall_1; }

		//AssStmt
		public RuleCall getAssStmtParserRuleCall_2() { return cAssStmtParserRuleCall_2; }
	}

	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAss1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAss1AssStmtParserRuleCall_2_0 = (RuleCall)cAss1Assignment_2.eContents().get(0);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAss2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAss2AssStmt2ParserRuleCall_5_0 = (RuleCall)cAss2Assignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStmtAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStmtStatementBlockParserRuleCall_7_0 = (RuleCall)cStmtAssignment_7.eContents().get(0);
		
		//ForStmt:
		//	"for" "(" ass1=AssStmt expr=Expr ";" ass2=AssStmt2 ")" stmt=StatementBlock;
		public ParserRule getRule() { return rule; }

		//"for" "(" ass1=AssStmt expr=Expr ";" ass2=AssStmt2 ")" stmt=StatementBlock
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ass1=AssStmt
		public Assignment getAss1Assignment_2() { return cAss1Assignment_2; }

		//AssStmt
		public RuleCall getAss1AssStmtParserRuleCall_2_0() { return cAss1AssStmtParserRuleCall_2_0; }

		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//ass2=AssStmt2
		public Assignment getAss2Assignment_5() { return cAss2Assignment_5; }

		//AssStmt2
		public RuleCall getAss2AssStmt2ParserRuleCall_5_0() { return cAss2AssStmt2ParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//stmt=StatementBlock
		public Assignment getStmtAssignment_7() { return cStmtAssignment_7; }

		//StatementBlock
		public RuleCall getStmtStatementBlockParserRuleCall_7_0() { return cStmtStatementBlockParserRuleCall_7_0; }
	}

	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStmtAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStmtStatementBlockParserRuleCall_4_0 = (RuleCall)cStmtAssignment_4.eContents().get(0);
		private final Assignment cElseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseElseStmtParserRuleCall_5_0 = (RuleCall)cElseAssignment_5.eContents().get(0);
		
		//IfStmt:
		//	"if" "(" expr=Expr ")" stmt=StatementBlock else=ElseStmt?;
		public ParserRule getRule() { return rule; }

		//"if" "(" expr=Expr ")" stmt=StatementBlock else=ElseStmt?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//stmt=StatementBlock
		public Assignment getStmtAssignment_4() { return cStmtAssignment_4; }

		//StatementBlock
		public RuleCall getStmtStatementBlockParserRuleCall_4_0() { return cStmtStatementBlockParserRuleCall_4_0; }

		//else=ElseStmt?
		public Assignment getElseAssignment_5() { return cElseAssignment_5; }

		//ElseStmt
		public RuleCall getElseElseStmtParserRuleCall_5_0() { return cElseElseStmtParserRuleCall_5_0; }
	}

	public class ElseStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStmtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStmtStatementBlockParserRuleCall_1_0 = (RuleCall)cStmtAssignment_1.eContents().get(0);
		
		//ElseStmt:
		//	"else" stmt=StatementBlock;
		public ParserRule getRule() { return rule; }

		//"else" stmt=StatementBlock
		public Group getGroup() { return cGroup; }

		//"else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }

		//stmt=StatementBlock
		public Assignment getStmtAssignment_1() { return cStmtAssignment_1; }

		//StatementBlock
		public RuleCall getStmtStatementBlockParserRuleCall_1_0() { return cStmtStatementBlockParserRuleCall_1_0; }
	}

	public class AssStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AssStmt:
		//	var=Var "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//var=Var "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//var=Var
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_0() { return cVarVarParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AssStmt2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssStmt2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//// special for assignment
		//AssStmt2:
		//	var=Var "=" expr=Expr;
		public ParserRule getRule() { return rule; }

		//var=Var "=" expr=Expr
		public Group getGroup() { return cGroup; }

		//var=Var
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_0() { return cVarVarParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }
	}

	public class AttrListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttrListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAttrAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAttrAttrAssParserRuleCall_1_0_0 = (RuleCall)cAttrAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAttrAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAttrAttrAssParserRuleCall_1_1_1_0 = (RuleCall)cAttrAssignment_1_1_1.eContents().get(0);
		
		//// attribution list
		//AttrList:
		//	{AttrList} (attr+=AttrAss? ("," attr+=AttrAss)*);
		public ParserRule getRule() { return rule; }

		//{AttrList} (attr+=AttrAss? ("," attr+=AttrAss)*)
		public Group getGroup() { return cGroup; }

		//{AttrList}
		public Action getAttrListAction_0() { return cAttrListAction_0; }

		//attr+=AttrAss? ("," attr+=AttrAss)*
		public Group getGroup_1() { return cGroup_1; }

		//attr+=AttrAss?
		public Assignment getAttrAssignment_1_0() { return cAttrAssignment_1_0; }

		//AttrAss
		public RuleCall getAttrAttrAssParserRuleCall_1_0_0() { return cAttrAttrAssParserRuleCall_1_0_0; }

		//("," attr+=AttrAss)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//attr+=AttrAss
		public Assignment getAttrAssignment_1_1_1() { return cAttrAssignment_1_1_1; }

		//AttrAss
		public RuleCall getAttrAttrAssParserRuleCall_1_1_1_0() { return cAttrAttrAssParserRuleCall_1_1_1_0; }
	}

	public class AttrAssElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrAss");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//AttrAss:
		//	name=ID "=" expr=Expr;
		public ParserRule getRule() { return rule; }

		//name=ID "=" expr=Expr
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConjAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConjConjParserRuleCall_0_0 = (RuleCall)cConjAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConjAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConjConjParserRuleCall_1_1_0 = (RuleCall)cConjAssignment_1_1.eContents().get(0);
		
		//// define expressions
		//Expr returns VARI:
		//	conj+=Conj ("||" conj+=Conj)*;
		public ParserRule getRule() { return rule; }

		//conj+=Conj ("||" conj+=Conj)*
		public Group getGroup() { return cGroup; }

		//conj+=Conj
		public Assignment getConjAssignment_0() { return cConjAssignment_0; }

		//Conj
		public RuleCall getConjConjParserRuleCall_0_0() { return cConjConjParserRuleCall_0_0; }

		//("||" conj+=Conj)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//conj+=Conj
		public Assignment getConjAssignment_1_1() { return cConjAssignment_1_1; }

		//Conj
		public RuleCall getConjConjParserRuleCall_1_1_0() { return cConjConjParserRuleCall_1_1_0; }
	}

	public class ConjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelatRelatParserRuleCall_0_0 = (RuleCall)cRelatAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRelatAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelatRelatParserRuleCall_1_1_0 = (RuleCall)cRelatAssignment_1_1.eContents().get(0);
		
		//Conj returns VARI:
		//	relat+=Relat ("&&" relat+=Relat)*;
		public ParserRule getRule() { return rule; }

		//relat+=Relat ("&&" relat+=Relat)*
		public Group getGroup() { return cGroup; }

		//relat+=Relat
		public Assignment getRelatAssignment_0() { return cRelatAssignment_0; }

		//Relat
		public RuleCall getRelatRelatParserRuleCall_0_0() { return cRelatRelatParserRuleCall_0_0; }

		//("&&" relat+=Relat)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//relat+=Relat
		public Assignment getRelatAssignment_1_1() { return cRelatAssignment_1_1; }

		//Relat
		public RuleCall getRelatRelatParserRuleCall_1_1_0() { return cRelatRelatParserRuleCall_1_1_0; }
	}

	public class RelatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddAddParserRuleCall_0_0 = (RuleCall)cAddAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cAddAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAddAddParserRuleCall_1_1_0 = (RuleCall)cAddAssignment_1_1.eContents().get(0);
		
		//Relat returns VARI:
		//	add+=Add (("==" | "<" | "<=") add+=Add)*;
		public ParserRule getRule() { return rule; }

		//add+=Add (("==" | "<" | "<=") add+=Add)*
		public Group getGroup() { return cGroup; }

		//add+=Add
		public Assignment getAddAssignment_0() { return cAddAssignment_0; }

		//Add
		public RuleCall getAddAddParserRuleCall_0_0() { return cAddAddParserRuleCall_0_0; }

		//(("==" | "<" | "<=") add+=Add)*
		public Group getGroup_1() { return cGroup_1; }

		//"==" | "<" | "<="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_1() { return cLessThanSignKeyword_1_0_1; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_2() { return cLessThanSignEqualsSignKeyword_1_0_2; }

		//add+=Add
		public Assignment getAddAssignment_1_1() { return cAddAssignment_1_1; }

		//Add
		public RuleCall getAddAddParserRuleCall_1_1_0() { return cAddAddParserRuleCall_1_1_0; }
	}

	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultMultParserRuleCall_0_0 = (RuleCall)cMultAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cMultAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultMultParserRuleCall_1_1_0 = (RuleCall)cMultAssignment_1_1.eContents().get(0);
		
		//Add returns VARI:
		//	mult+=Mult (("+" | "-") mult+=Mult)*;
		public ParserRule getRule() { return rule; }

		//mult+=Mult (("+" | "-") mult+=Mult)*
		public Group getGroup() { return cGroup; }

		//mult+=Mult
		public Assignment getMultAssignment_0() { return cMultAssignment_0; }

		//Mult
		public RuleCall getMultMultParserRuleCall_0_0() { return cMultMultParserRuleCall_0_0; }

		//(("+" | "-") mult+=Mult)*
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//mult+=Mult
		public Assignment getMultAssignment_1_1() { return cMultAssignment_1_1; }

		//Mult
		public RuleCall getMultMultParserRuleCall_1_1_0() { return cMultMultParserRuleCall_1_1_0; }
	}

	public class MultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryUnaryParserRuleCall_0_0 = (RuleCall)cUnaryAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cUnaryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnaryUnaryParserRuleCall_1_1_0 = (RuleCall)cUnaryAssignment_1_1.eContents().get(0);
		
		//Mult returns VARI:
		//	unary+=Unary (("*" | "/") unary+=Unary)*;
		public ParserRule getRule() { return rule; }

		//unary+=Unary (("*" | "/") unary+=Unary)*
		public Group getGroup() { return cGroup; }

		//unary+=Unary
		public Assignment getUnaryAssignment_0() { return cUnaryAssignment_0; }

		//Unary
		public RuleCall getUnaryUnaryParserRuleCall_0_0() { return cUnaryUnaryParserRuleCall_0_0; }

		//(("*" | "/") unary+=Unary)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//unary+=Unary
		public Assignment getUnaryAssignment_1_1() { return cUnaryAssignment_1_1; }

		//Unary
		public RuleCall getUnaryUnaryParserRuleCall_1_1_0() { return cUnaryUnaryParserRuleCall_1_1_0; }
	}

	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cAtomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomAtomParserRuleCall_1_0 = (RuleCall)cAtomAssignment_1.eContents().get(0);
		
		//Unary returns VARI:
		//	("!" | "-")* atom=Atom;
		public ParserRule getRule() { return rule; }

		//("!" | "-")* atom=Atom
		public Group getGroup() { return cGroup; }

		//("!" | "-")*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//atom=Atom
		public Assignment getAtomAssignment_1() { return cAtomAssignment_1; }

		//Atom
		public RuleCall getAtomAtomParserRuleCall_1_0() { return cAtomAtomParserRuleCall_1_0; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVar1Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVar1VarParserRuleCall_1_0_0 = (RuleCall)cVar1Assignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cTouchesKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cVar2Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVar2VarParserRuleCall_1_1_1_0 = (RuleCall)cVar2Assignment_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Atom:
		//	value=INT | var1=Var ("touches" var2=Var)? | "(" expr=Expr ")";
		public ParserRule getRule() { return rule; }

		//value=INT | var1=Var ("touches" var2=Var)? | "(" expr=Expr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//var1=Var ("touches" var2=Var)?
		public Group getGroup_1() { return cGroup_1; }

		//var1=Var
		public Assignment getVar1Assignment_1_0() { return cVar1Assignment_1_0; }

		//Var
		public RuleCall getVar1VarParserRuleCall_1_0_0() { return cVar1VarParserRuleCall_1_0_0; }

		//("touches" var2=Var)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"touches"
		public Keyword getTouchesKeyword_1_1_0() { return cTouchesKeyword_1_1_0; }

		//var2=Var
		public Assignment getVar2Assignment_1_1_1() { return cVar2Assignment_1_1_1; }

		//Var
		public RuleCall getVar2VarParserRuleCall_1_1_1_0() { return cVar2VarParserRuleCall_1_1_1_0; }

		//"(" expr=Expr ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//expr=Expr
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_1_0() { return cExprExprParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExprAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0_1_0 = (RuleCall)cExprAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cFullStopKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cSubnameAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cSubnameIDTerminalRuleCall_1_0_3_1_0 = (RuleCall)cSubnameAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSubnameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubnameIDTerminalRuleCall_1_1_1_0 = (RuleCall)cSubnameAssignment_1_1_1.eContents().get(0);
		
		//// define variables
		//Var returns VARI:
		//	name=ID ("[" expr=Expr "]" ("." subname=ID)? | "." subname=ID)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("[" expr=Expr "]" ("." subname=ID)? | "." subname=ID)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("[" expr=Expr "]" ("." subname=ID)? | "." subname=ID)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"[" expr=Expr "]" ("." subname=ID)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//expr=Expr
		public Assignment getExprAssignment_1_0_1() { return cExprAssignment_1_0_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0_1_0() { return cExprExprParserRuleCall_1_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }

		//("." subname=ID)?
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//"."
		public Keyword getFullStopKeyword_1_0_3_0() { return cFullStopKeyword_1_0_3_0; }

		//subname=ID
		public Assignment getSubnameAssignment_1_0_3_1() { return cSubnameAssignment_1_0_3_1; }

		//ID
		public RuleCall getSubnameIDTerminalRuleCall_1_0_3_1_0() { return cSubnameIDTerminalRuleCall_1_0_3_1_0; }

		//"." subname=ID
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//subname=ID
		public Assignment getSubnameAssignment_1_1_1() { return cSubnameAssignment_1_1_1; }

		//ID
		public RuleCall getSubnameIDTerminalRuleCall_1_1_1_0() { return cSubnameIDTerminalRuleCall_1_1_1_0; }
	}
	
	
	private ModelElements pModel;
	private DeclarationElements pDeclaration;
	private VarDeclElements pVarDecl;
	private ObjDeclElements pObjDecl;
	private BlockElements pBlock;
	private AnimBlockElements pAnimBlock;
	private EventBlockElements pEventBlock;
	private ObjTypeElements pObjType;
	private KeystrokeElements pKeystroke;
	private StatementBlockElements pStatementBlock;
	private StmtElements pStmt;
	private ForStmtElements pForStmt;
	private IfStmtElements pIfStmt;
	private ElseStmtElements pElseStmt;
	private AssStmtElements pAssStmt;
	private AssStmt2Elements pAssStmt2;
	private AttrListElements pAttrList;
	private AttrAssElements pAttrAss;
	private ExprElements pExpr;
	private ConjElements pConj;
	private RelatElements pRelat;
	private AddElements pAdd;
	private MultElements pMult;
	private UnaryElements pUnary;
	private AtomElements pAtom;
	private VarElements pVar;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MgplDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.mgpl.MgplDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"game" name=ID "(" attr=AttrList ")" decl+=Declaration* stmt=StatementBlock blocks+=Block*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Declaration:
	//	(vari=VarDecl | obj=ObjDecl) ";";
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//VarDecl returns VARE:
	//	"int" name=ID (("=" expr=Expr)? | "[" value=INT "]");
	public VarDeclElements getVarDeclAccess() {
		return (pVarDecl != null) ? pVarDecl : (pVarDecl = new VarDeclElements());
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	//ObjDecl returns VARE:
	//	type=ObjType name=ID ("(" attr=AttrList ")" | "[" value=INT "]");
	public ObjDeclElements getObjDeclAccess() {
		return (pObjDecl != null) ? pObjDecl : (pObjDecl = new ObjDeclElements());
	}
	
	public ParserRule getObjDeclRule() {
		return getObjDeclAccess().getRule();
	}

	//Block:
	//	AnimBlock | EventBlock;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//AnimBlock:
	//	"animation" name=ID "(" type=ObjType objName=ID ")" stmt=StatementBlock;
	public AnimBlockElements getAnimBlockAccess() {
		return (pAnimBlock != null) ? pAnimBlock : (pAnimBlock = new AnimBlockElements());
	}
	
	public ParserRule getAnimBlockRule() {
		return getAnimBlockAccess().getRule();
	}

	//EventBlock:
	//	"on" key=Keystroke stmt=StatementBlock;
	public EventBlockElements getEventBlockAccess() {
		return (pEventBlock != null) ? pEventBlock : (pEventBlock = new EventBlockElements());
	}
	
	public ParserRule getEventBlockRule() {
		return getEventBlockAccess().getRule();
	}

	//ObjType:
	//	"rectangle" | "triangle" | "circle";
	public ObjTypeElements getObjTypeAccess() {
		return (pObjType != null) ? pObjType : (pObjType = new ObjTypeElements());
	}
	
	public ParserRule getObjTypeRule() {
		return getObjTypeAccess().getRule();
	}

	//Keystroke:
	//	"space" | "leftarrow" | "rightarrow" | "uparrow" | "downarrow";
	public KeystrokeElements getKeystrokeAccess() {
		return (pKeystroke != null) ? pKeystroke : (pKeystroke = new KeystrokeElements());
	}
	
	public ParserRule getKeystrokeRule() {
		return getKeystrokeAccess().getRule();
	}

	//StatementBlock:
	//	{StatementBlock} ("{" stmt+=Stmt* "}");
	public StatementBlockElements getStatementBlockAccess() {
		return (pStatementBlock != null) ? pStatementBlock : (pStatementBlock = new StatementBlockElements());
	}
	
	public ParserRule getStatementBlockRule() {
		return getStatementBlockAccess().getRule();
	}

	//Stmt:
	//	IfStmt | ForStmt | AssStmt;
	public StmtElements getStmtAccess() {
		return (pStmt != null) ? pStmt : (pStmt = new StmtElements());
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}

	//ForStmt:
	//	"for" "(" ass1=AssStmt expr=Expr ";" ass2=AssStmt2 ")" stmt=StatementBlock;
	public ForStmtElements getForStmtAccess() {
		return (pForStmt != null) ? pForStmt : (pForStmt = new ForStmtElements());
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}

	//IfStmt:
	//	"if" "(" expr=Expr ")" stmt=StatementBlock else=ElseStmt?;
	public IfStmtElements getIfStmtAccess() {
		return (pIfStmt != null) ? pIfStmt : (pIfStmt = new IfStmtElements());
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}

	//ElseStmt:
	//	"else" stmt=StatementBlock;
	public ElseStmtElements getElseStmtAccess() {
		return (pElseStmt != null) ? pElseStmt : (pElseStmt = new ElseStmtElements());
	}
	
	public ParserRule getElseStmtRule() {
		return getElseStmtAccess().getRule();
	}

	//AssStmt:
	//	var=Var "=" expr=Expr ";";
	public AssStmtElements getAssStmtAccess() {
		return (pAssStmt != null) ? pAssStmt : (pAssStmt = new AssStmtElements());
	}
	
	public ParserRule getAssStmtRule() {
		return getAssStmtAccess().getRule();
	}

	//// special for assignment
	//AssStmt2:
	//	var=Var "=" expr=Expr;
	public AssStmt2Elements getAssStmt2Access() {
		return (pAssStmt2 != null) ? pAssStmt2 : (pAssStmt2 = new AssStmt2Elements());
	}
	
	public ParserRule getAssStmt2Rule() {
		return getAssStmt2Access().getRule();
	}

	//// attribution list
	//AttrList:
	//	{AttrList} (attr+=AttrAss? ("," attr+=AttrAss)*);
	public AttrListElements getAttrListAccess() {
		return (pAttrList != null) ? pAttrList : (pAttrList = new AttrListElements());
	}
	
	public ParserRule getAttrListRule() {
		return getAttrListAccess().getRule();
	}

	//AttrAss:
	//	name=ID "=" expr=Expr;
	public AttrAssElements getAttrAssAccess() {
		return (pAttrAss != null) ? pAttrAss : (pAttrAss = new AttrAssElements());
	}
	
	public ParserRule getAttrAssRule() {
		return getAttrAssAccess().getRule();
	}

	//// define expressions
	//Expr returns VARI:
	//	conj+=Conj ("||" conj+=Conj)*;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//Conj returns VARI:
	//	relat+=Relat ("&&" relat+=Relat)*;
	public ConjElements getConjAccess() {
		return (pConj != null) ? pConj : (pConj = new ConjElements());
	}
	
	public ParserRule getConjRule() {
		return getConjAccess().getRule();
	}

	//Relat returns VARI:
	//	add+=Add (("==" | "<" | "<=") add+=Add)*;
	public RelatElements getRelatAccess() {
		return (pRelat != null) ? pRelat : (pRelat = new RelatElements());
	}
	
	public ParserRule getRelatRule() {
		return getRelatAccess().getRule();
	}

	//Add returns VARI:
	//	mult+=Mult (("+" | "-") mult+=Mult)*;
	public AddElements getAddAccess() {
		return (pAdd != null) ? pAdd : (pAdd = new AddElements());
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}

	//Mult returns VARI:
	//	unary+=Unary (("*" | "/") unary+=Unary)*;
	public MultElements getMultAccess() {
		return (pMult != null) ? pMult : (pMult = new MultElements());
	}
	
	public ParserRule getMultRule() {
		return getMultAccess().getRule();
	}

	//Unary returns VARI:
	//	("!" | "-")* atom=Atom;
	public UnaryElements getUnaryAccess() {
		return (pUnary != null) ? pUnary : (pUnary = new UnaryElements());
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}

	//Atom:
	//	value=INT | var1=Var ("touches" var2=Var)? | "(" expr=Expr ")";
	public AtomElements getAtomAccess() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//// define variables
	//Var returns VARI:
	//	name=ID ("[" expr=Expr "]" ("." subname=ID)? | "." subname=ID)?;
	public VarElements getVarAccess() {
		return (pVar != null) ? pVar : (pVar = new VarElements());
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
