/*
* generated by Xtext
*/
grammar InternalMgplDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.mgpl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.mgpl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.mgpl.services.MgplDSLGrammarAccess;

}

@parser::members {

 	private MgplDSLGrammarAccess grammarAccess;
 	
    public InternalMgplDSLParser(TokenStream input, MgplDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MgplDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGameGameParserRuleCall_0_0()); 
	    }
		lv_game_0_0=ruleGame		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"game",
        		lv_game_0_0, 
        		"Game");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclDeclarationParserRuleCall_1_0()); 
	    }
		lv_decl_1_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_1_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStmtStatementBlockParserRuleCall_2_0()); 
	    }
		lv_stmt_2_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_2_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getBlocksBlockParserRuleCall_3_0()); 
	    }
		lv_blocks_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleGame
entryRuleGame returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGameRule()); }
	 iv_ruleGame=ruleGame 
	 { $current=$iv_ruleGame.current; } 
	 EOF 
;

// Rule Game
ruleGame returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='game' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGameAccess().getGameKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGameAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGameAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGameAccess().getAttrAttrListParserRuleCall_3_0()); 
	    }
		lv_attr_3_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGameRule());
	        }
       		set(
       			$current, 
       			"attr",
        		lv_attr_3_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGameAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getVarVarDeclParserRuleCall_0_0_0()); 
	    }
		lv_var_0_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getObjObjDeclParserRuleCall_0_1_0()); 
	    }
		lv_obj_1_0=ruleObjDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"obj",
        		lv_obj_1_0, 
        		"ObjDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeclarationAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	 iv_ruleVarDecl=ruleVarDecl 
	 { $current=$iv_ruleVarDecl.current; } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='int' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVarDeclAccess().getIntKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclAccess().getExprInitParserRuleCall_2_0_0()); 
	    }
		lv_expr_2_0=ruleInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Init");
	        afterParserOrEnumRuleCall();
	    }

)
)?
    |(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarDeclAccess().getLeftSquareBracketKeyword_2_1_0());
    }
(
(
		lv_int_4_0=RULE_INT
		{
			newLeafNode(lv_int_4_0, grammarAccess.getVarDeclAccess().getIntINTTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_4_0, 
        		"INT");
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVarDeclAccess().getRightSquareBracketKeyword_2_1_2());
    }
)))
;





// Entry rule entryRuleInit
entryRuleInit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitRule()); }
	 iv_ruleInit=ruleInit 
	 { $current=$iv_ruleInit.current; } 
	 EOF 
;

// Rule Init
ruleInit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitAccess().getEqualsSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitAccess().getExprExprParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleObjDecl
entryRuleObjDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjDeclRule()); }
	 iv_ruleObjDecl=ruleObjDecl 
	 { $current=$iv_ruleObjDecl.current; } 
	 EOF 
;

// Rule ObjDecl
ruleObjDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getObjDeclAccess().getTypeObjTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleObjType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ObjType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getObjDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObjDeclAccess().getLeftParenthesisKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjDeclAccess().getAttrAttrListParserRuleCall_2_0_1_0()); 
	    }
		lv_attr_3_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjDeclRule());
	        }
       		set(
       			$current, 
       			"attr",
        		lv_attr_3_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getObjDeclAccess().getRightParenthesisKeyword_2_0_2());
    }
)
    |(	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getObjDeclAccess().getLeftSquareBracketKeyword_2_1_0());
    }
(
(
		lv_int_6_0=RULE_INT
		{
			newLeafNode(lv_int_6_0, grammarAccess.getObjDeclAccess().getIntINTTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_6_0, 
        		"INT");
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getObjDeclAccess().getRightSquareBracketKeyword_2_1_2());
    }
)))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getAnimBlockParserRuleCall_0()); 
    }
    this_AnimBlock_0=ruleAnimBlock
    { 
        $current = $this_AnimBlock_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getEventBlockParserRuleCall_1()); 
    }
    this_EventBlock_1=ruleEventBlock
    { 
        $current = $this_EventBlock_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAnimBlock
entryRuleAnimBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnimBlockRule()); }
	 iv_ruleAnimBlock=ruleAnimBlock 
	 { $current=$iv_ruleAnimBlock.current; } 
	 EOF 
;

// Rule AnimBlock
ruleAnimBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='animation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnimBlockAccess().getAnimationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAnimBlockAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnimBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnimBlockAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnimBlockAccess().getTypeObjTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleObjType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnimBlockRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ObjType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_objName_4_0=RULE_ID
		{
			newLeafNode(lv_objName_4_0, grammarAccess.getAnimBlockAccess().getObjNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnimBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"objName",
        		lv_objName_4_0, 
        		"ID");
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnimBlockAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnimBlockAccess().getStmtStatementBlockParserRuleCall_6_0()); 
	    }
		lv_stmt_6_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnimBlockRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_6_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEventBlock
entryRuleEventBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventBlockRule()); }
	 iv_ruleEventBlock=ruleEventBlock 
	 { $current=$iv_ruleEventBlock.current; } 
	 EOF 
;

// Rule EventBlock
ruleEventBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventBlockAccess().getOnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventBlockAccess().getKeyKeystrokeParserRuleCall_1_0()); 
	    }
		lv_key_1_0=ruleKeystroke		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventBlockRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_1_0, 
        		"Keystroke");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEventBlockAccess().getStmtStatementBlockParserRuleCall_2_0()); 
	    }
		lv_stmt_2_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventBlockRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_2_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleObjType
entryRuleObjType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjTypeRule()); } 
	 iv_ruleObjType=ruleObjType 
	 { $current=$iv_ruleObjType.current.getText(); }  
	 EOF 
;

// Rule ObjType
ruleObjType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='rectangle' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getObjTypeAccess().getRectangleKeyword_0()); 
    }

    |
	kw='triangle' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getObjTypeAccess().getTriangleKeyword_1()); 
    }

    |
	kw='circle' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getObjTypeAccess().getCircleKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleKeystroke
entryRuleKeystroke returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeystrokeRule()); } 
	 iv_ruleKeystroke=ruleKeystroke 
	 { $current=$iv_ruleKeystroke.current.getText(); }  
	 EOF 
;

// Rule Keystroke
ruleKeystroke returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='space' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeystrokeAccess().getSpaceKeyword_0()); 
    }

    |
	kw='leftarrow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeystrokeAccess().getLeftarrowKeyword_1()); 
    }

    |
	kw='rightarrow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeystrokeAccess().getRightarrowKeyword_2()); 
    }

    |
	kw='uparrow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeystrokeAccess().getUparrowKeyword_3()); 
    }

    |
	kw='downarrow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeystrokeAccess().getDownarrowKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleStatementBlock
entryRuleStatementBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementBlockRule()); }
	 iv_ruleStatementBlock=ruleStatementBlock 
	 { $current=$iv_ruleStatementBlock.current; } 
	 EOF 
;

// Rule StatementBlock
ruleStatementBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementBlockAccess().getStatementBlockAction_0(),
            $current);
    }
)(	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementBlockAccess().getLeftCurlyBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementBlockAccess().getStmtStmtParserRuleCall_1_1_0()); 
	    }
		lv_stmt_2_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementBlockRule());
	        }
       		add(
       			$current, 
       			"stmt",
        		lv_stmt_2_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementBlockAccess().getRightCurlyBracketKeyword_1_2());
    }
))
;





// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	 iv_ruleStmt=ruleStmt 
	 { $current=$iv_ruleStmt.current; } 
	 EOF 
;

// Rule Stmt
ruleStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getIfStmtParserRuleCall_0()); 
    }
    this_IfStmt_0=ruleIfStmt
    { 
        $current = $this_IfStmt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getForStmtParserRuleCall_1()); 
    }
    this_ForStmt_1=ruleForStmt
    { 
        $current = $this_ForStmt_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getAssStmtParserRuleCall_2()); 
    }
    this_AssStmt_2=ruleAssStmt
    { 
        $current = $this_AssStmt_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForStmt
entryRuleForStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForStmtRule()); }
	 iv_ruleForStmt=ruleForStmt 
	 { $current=$iv_ruleForStmt.current; } 
	 EOF 
;

// Rule ForStmt
ruleForStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForStmtAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForStmtAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStmtAccess().getAss1AssStmtParserRuleCall_2_0()); 
	    }
		lv_ass1_2_0=ruleAssStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStmtRule());
	        }
       		set(
       			$current, 
       			"ass1",
        		lv_ass1_2_0, 
        		"AssStmt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForStmtAccess().getExprExprParserRuleCall_3_0()); 
	    }
		lv_expr_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStmtRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForStmtAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStmtAccess().getAss2AssStmt2ParserRuleCall_5_0()); 
	    }
		lv_ass2_5_0=ruleAssStmt2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStmtRule());
	        }
       		set(
       			$current, 
       			"ass2",
        		lv_ass2_5_0, 
        		"AssStmt2");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForStmtAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStmtAccess().getStmtStatementBlockParserRuleCall_7_0()); 
	    }
		lv_stmt_7_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStmtRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_7_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIfStmt
entryRuleIfStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStmtRule()); }
	 iv_ruleIfStmt=ruleIfStmt 
	 { $current=$iv_ruleIfStmt.current; } 
	 EOF 
;

// Rule IfStmt
ruleIfStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStmtAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStmtAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStmtAccess().getExprExprParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStmtRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStmtAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStmtAccess().getStmtStatementBlockParserRuleCall_4_0()); 
	    }
		lv_stmt_4_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStmtRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_4_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStmtAccess().getElseElseStmtParserRuleCall_5_0()); 
	    }
		lv_else_5_0=ruleElseStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStmtRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_0, 
        		"ElseStmt");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleElseStmt
entryRuleElseStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseStmtRule()); }
	 iv_ruleElseStmt=ruleElseStmt 
	 { $current=$iv_ruleElseStmt.current; } 
	 EOF 
;

// Rule ElseStmt
ruleElseStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='else' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElseStmtAccess().getElseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseStmtAccess().getStmtStatementBlockParserRuleCall_1_0()); 
	    }
		lv_stmt_1_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseStmtRule());
	        }
       		set(
       			$current, 
       			"stmt",
        		lv_stmt_1_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssStmt
entryRuleAssStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssStmtRule()); }
	 iv_ruleAssStmt=ruleAssStmt 
	 { $current=$iv_ruleAssStmt.current; } 
	 EOF 
;

// Rule AssStmt
ruleAssStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssStmtAccess().getVarVarParserRuleCall_0_0()); 
	    }
		lv_var_0_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssStmtRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssStmtAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssStmtAccess().getExprExprParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssStmtRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssStmtAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAssStmt2
entryRuleAssStmt2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssStmt2Rule()); }
	 iv_ruleAssStmt2=ruleAssStmt2 
	 { $current=$iv_ruleAssStmt2.current; } 
	 EOF 
;

// Rule AssStmt2
ruleAssStmt2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssStmt2Access().getVarVarParserRuleCall_0_0()); 
	    }
		lv_var_0_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssStmt2Rule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssStmt2Access().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssStmt2Access().getExprExprParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssStmt2Rule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttrList
entryRuleAttrList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrListRule()); }
	 iv_ruleAttrList=ruleAttrList 
	 { $current=$iv_ruleAttrList.current; } 
	 EOF 
;

// Rule AttrList
ruleAttrList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttrListAccess().getAttrListAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAttrListAccess().getAttrAttrAssParserRuleCall_1_0_0()); 
	    }
		lv_attr_1_0=ruleAttrAss		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrListRule());
	        }
       		add(
       			$current, 
       			"attr",
        		lv_attr_1_0, 
        		"AttrAss");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttrListAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrListAccess().getAttrAttrAssParserRuleCall_1_1_1_0()); 
	    }
		lv_attr_3_0=ruleAttrAss		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrListRule());
	        }
       		add(
       			$current, 
       			"attr",
        		lv_attr_3_0, 
        		"AttrAss");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleAttrAss
entryRuleAttrAss returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrAssRule()); }
	 iv_ruleAttrAss=ruleAttrAss 
	 { $current=$iv_ruleAttrAss.current; } 
	 EOF 
;

// Rule AttrAss
ruleAttrAss returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAttrAssAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttrAssRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttrAssAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrAssAccess().getExprExprParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrAssRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExprAccess().getDisjParserRuleCall()); 
    }
    this_Disj_0=ruleDisj
    { 
        $current = $this_Disj_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleDisj
entryRuleDisj returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDisjRule()); }
	 iv_ruleDisj=ruleDisj 
	 { $current=$iv_ruleDisj.current; } 
	 EOF 
;

// Rule Disj
ruleDisj returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDisjAccess().getConjConjParserRuleCall_0_0()); 
	    }
		lv_conj_0_0=ruleConj		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisjRule());
	        }
       		add(
       			$current, 
       			"conj",
        		lv_conj_0_0, 
        		"Conj");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='||' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDisjAccess().getVerticalLineVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDisjAccess().getConjConjParserRuleCall_1_1_0()); 
	    }
		lv_conj_2_0=ruleConj		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisjRule());
	        }
       		add(
       			$current, 
       			"conj",
        		lv_conj_2_0, 
        		"Conj");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConj
entryRuleConj returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConjRule()); }
	 iv_ruleConj=ruleConj 
	 { $current=$iv_ruleConj.current; } 
	 EOF 
;

// Rule Conj
ruleConj returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConjAccess().getRelatRelatParserRuleCall_0_0()); 
	    }
		lv_relat_0_0=ruleRelat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjRule());
	        }
       		add(
       			$current, 
       			"relat",
        		lv_relat_0_0, 
        		"Relat");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConjAccess().getAmpersandAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConjAccess().getRelatRelatParserRuleCall_1_1_0()); 
	    }
		lv_relat_2_0=ruleRelat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjRule());
	        }
       		add(
       			$current, 
       			"relat",
        		lv_relat_2_0, 
        		"Relat");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelat
entryRuleRelat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelatRule()); }
	 iv_ruleRelat=ruleRelat 
	 { $current=$iv_ruleRelat.current; } 
	 EOF 
;

// Rule Relat
ruleRelat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelatAccess().getAddAddParserRuleCall_0_0()); 
	    }
		lv_add_0_0=ruleAdd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelatRule());
	        }
       		add(
       			$current, 
       			"add",
        		lv_add_0_0, 
        		"Add");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='==' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRelatAccess().getEqualsSignEqualsSignKeyword_1_0_0());
    }

    |	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRelatAccess().getLessThanSignKeyword_1_0_1());
    }

    |	otherlv_3='<=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRelatAccess().getLessThanSignEqualsSignKeyword_1_0_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelatAccess().getAddAddParserRuleCall_1_1_0()); 
	    }
		lv_add_4_0=ruleAdd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelatRule());
	        }
       		add(
       			$current, 
       			"add",
        		lv_add_4_0, 
        		"Add");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdd
entryRuleAdd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddRule()); }
	 iv_ruleAdd=ruleAdd 
	 { $current=$iv_ruleAdd.current; } 
	 EOF 
;

// Rule Add
ruleAdd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAddAccess().getMultMultParserRuleCall_0_0()); 
	    }
		lv_mult_0_0=ruleMult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddRule());
	        }
       		add(
       			$current, 
       			"mult",
        		lv_mult_0_0, 
        		"Mult");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAddAccess().getPlusSignKeyword_1_0_0());
    }

    |	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAddAccess().getHyphenMinusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddAccess().getMultMultParserRuleCall_1_1_0()); 
	    }
		lv_mult_3_0=ruleMult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddRule());
	        }
       		add(
       			$current, 
       			"mult",
        		lv_mult_3_0, 
        		"Mult");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMult
entryRuleMult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultRule()); }
	 iv_ruleMult=ruleMult 
	 { $current=$iv_ruleMult.current; } 
	 EOF 
;

// Rule Mult
ruleMult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultAccess().getUnaryUnaryParserRuleCall_0_0()); 
	    }
		lv_unary_0_0=ruleUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultRule());
	        }
       		add(
       			$current, 
       			"unary",
        		lv_unary_0_0, 
        		"Unary");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultAccess().getAsteriskKeyword_1_0_0());
    }

    |	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultAccess().getSolidusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultAccess().getUnaryUnaryParserRuleCall_1_1_0()); 
	    }
		lv_unary_3_0=ruleUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultRule());
	        }
       		add(
       			$current, 
       			"unary",
        		lv_unary_3_0, 
        		"Unary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnary
entryRuleUnary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryRule()); }
	 iv_ruleUnary=ruleUnary 
	 { $current=$iv_ruleUnary.current; } 
	 EOF 
;

// Rule Unary
ruleUnary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryAccess().getExclamationMarkKeyword_0_0());
    }

    |	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnaryAccess().getHyphenMinusKeyword_0_1());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryAccess().getAtomAtomParserRuleCall_1_0()); 
	    }
		lv_atom_2_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryRule());
	        }
       		set(
       			$current, 
       			"atom",
        		lv_atom_2_0, 
        		"Atom");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomAccess().getAtomAction_0(),
            $current);
    }
)((
(
		lv_int_1_0=RULE_INT
		{
			newLeafNode(lv_int_1_0, grammarAccess.getAtomAccess().getIntINTTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_1_0, 
        		"INT");
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getVar1VarParserRuleCall_1_1_0_0()); 
	    }
		lv_var1_2_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"var1",
        		lv_var1_2_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='touches' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAtomAccess().getTouchesKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getVar2VarParserRuleCall_1_1_1_1_0()); 
	    }
		lv_var2_4_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"var2",
        		lv_var2_4_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getExprExprParserRuleCall_1_2_1_0()); 
	    }
		lv_expr_6_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_6_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_2_2());
    }
)))
;





// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	 iv_ruleVar=ruleVar 
	 { $current=$iv_ruleVar.current; } 
	 EOF 
;

// Rule Var
ruleVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVarAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)((	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarAccess().getLeftSquareBracketKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAccess().getExprExprParserRuleCall_1_0_1_0()); 
	    }
		lv_expr_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarAccess().getRightSquareBracketKeyword_1_0_2());
    }
(	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVarAccess().getFullStopKeyword_1_0_3_0());
    }
(
(
		lv_subname_5_0=RULE_ID
		{
			newLeafNode(lv_subname_5_0, grammarAccess.getVarAccess().getSubnameIDTerminalRuleCall_1_0_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"subname",
        		lv_subname_5_0, 
        		"ID");
	    }

)
))?)
    |(	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVarAccess().getFullStopKeyword_1_1_0());
    }
(
(
		lv_subname_7_0=RULE_ID
		{
			newLeafNode(lv_subname_7_0, grammarAccess.getVarAccess().getSubnameIDTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"subname",
        		lv_subname_7_0, 
        		"ID");
	    }

)
)))?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


