/*
* generated by Xtext
*/
package org.xtext.mgpl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.mgpl.services.MgplDSLGrammarAccess;

public class MgplDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private MgplDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.mgpl.ui.contentassist.antlr.internal.InternalMgplDSLParser createParser() {
		org.xtext.mgpl.ui.contentassist.antlr.internal.InternalMgplDSLParser result = new org.xtext.mgpl.ui.contentassist.antlr.internal.InternalMgplDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDeclarationAccess().getAlternatives_0(), "rule__Declaration__Alternatives_0");
					put(grammarAccess.getVarDeclAccess().getAlternatives_2(), "rule__VarDecl__Alternatives_2");
					put(grammarAccess.getObjDeclAccess().getAlternatives_2(), "rule__ObjDecl__Alternatives_2");
					put(grammarAccess.getBlockAccess().getAlternatives(), "rule__Block__Alternatives");
					put(grammarAccess.getObjTypeAccess().getAlternatives(), "rule__ObjType__Alternatives");
					put(grammarAccess.getKeystrokeAccess().getAlternatives(), "rule__Keystroke__Alternatives");
					put(grammarAccess.getStmtAccess().getAlternatives(), "rule__Stmt__Alternatives");
					put(grammarAccess.getRelatAccess().getAlternatives_1_0(), "rule__Relat__Alternatives_1_0");
					put(grammarAccess.getAddAccess().getAlternatives_1_0(), "rule__Add__Alternatives_1_0");
					put(grammarAccess.getMultAccess().getAlternatives_1_0(), "rule__Mult__Alternatives_1_0");
					put(grammarAccess.getUnaryAccess().getAlternatives_0(), "rule__Unary__Alternatives_0");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getVarAccess().getAlternatives_1(), "rule__Var__Alternatives_1");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup_2_0(), "rule__VarDecl__Group_2_0__0");
					put(grammarAccess.getVarDeclAccess().getGroup_2_1(), "rule__VarDecl__Group_2_1__0");
					put(grammarAccess.getObjDeclAccess().getGroup(), "rule__ObjDecl__Group__0");
					put(grammarAccess.getObjDeclAccess().getGroup_2_0(), "rule__ObjDecl__Group_2_0__0");
					put(grammarAccess.getObjDeclAccess().getGroup_2_1(), "rule__ObjDecl__Group_2_1__0");
					put(grammarAccess.getAnimBlockAccess().getGroup(), "rule__AnimBlock__Group__0");
					put(grammarAccess.getEventBlockAccess().getGroup(), "rule__EventBlock__Group__0");
					put(grammarAccess.getStatementBlockAccess().getGroup(), "rule__StatementBlock__Group__0");
					put(grammarAccess.getStatementBlockAccess().getGroup_1(), "rule__StatementBlock__Group_1__0");
					put(grammarAccess.getForStmtAccess().getGroup(), "rule__ForStmt__Group__0");
					put(grammarAccess.getIfStmtAccess().getGroup(), "rule__IfStmt__Group__0");
					put(grammarAccess.getElseStmtAccess().getGroup(), "rule__ElseStmt__Group__0");
					put(grammarAccess.getAssStmtAccess().getGroup(), "rule__AssStmt__Group__0");
					put(grammarAccess.getAssStmt2Access().getGroup(), "rule__AssStmt2__Group__0");
					put(grammarAccess.getAttrListAccess().getGroup(), "rule__AttrList__Group__0");
					put(grammarAccess.getAttrListAccess().getGroup_1(), "rule__AttrList__Group_1__0");
					put(grammarAccess.getAttrListAccess().getGroup_1_1(), "rule__AttrList__Group_1_1__0");
					put(grammarAccess.getAttrAssAccess().getGroup(), "rule__AttrAss__Group__0");
					put(grammarAccess.getExprAccess().getGroup(), "rule__Expr__Group__0");
					put(grammarAccess.getExprAccess().getGroup_1(), "rule__Expr__Group_1__0");
					put(grammarAccess.getConjAccess().getGroup(), "rule__Conj__Group__0");
					put(grammarAccess.getConjAccess().getGroup_1(), "rule__Conj__Group_1__0");
					put(grammarAccess.getRelatAccess().getGroup(), "rule__Relat__Group__0");
					put(grammarAccess.getRelatAccess().getGroup_1(), "rule__Relat__Group_1__0");
					put(grammarAccess.getAddAccess().getGroup(), "rule__Add__Group__0");
					put(grammarAccess.getAddAccess().getGroup_1(), "rule__Add__Group_1__0");
					put(grammarAccess.getMultAccess().getGroup(), "rule__Mult__Group__0");
					put(grammarAccess.getMultAccess().getGroup_1(), "rule__Mult__Group_1__0");
					put(grammarAccess.getUnaryAccess().getGroup(), "rule__Unary__Group__0");
					put(grammarAccess.getAtomAccess().getGroup_1(), "rule__Atom__Group_1__0");
					put(grammarAccess.getAtomAccess().getGroup_1_1(), "rule__Atom__Group_1_1__0");
					put(grammarAccess.getAtomAccess().getGroup_2(), "rule__Atom__Group_2__0");
					put(grammarAccess.getVarAccess().getGroup(), "rule__Var__Group__0");
					put(grammarAccess.getVarAccess().getGroup_1_0(), "rule__Var__Group_1_0__0");
					put(grammarAccess.getVarAccess().getGroup_1_0_3(), "rule__Var__Group_1_0_3__0");
					put(grammarAccess.getVarAccess().getGroup_1_1(), "rule__Var__Group_1_1__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getAttrAssignment_3(), "rule__Model__AttrAssignment_3");
					put(grammarAccess.getModelAccess().getDeclAssignment_5(), "rule__Model__DeclAssignment_5");
					put(grammarAccess.getModelAccess().getStmtAssignment_6(), "rule__Model__StmtAssignment_6");
					put(grammarAccess.getModelAccess().getBlocksAssignment_7(), "rule__Model__BlocksAssignment_7");
					put(grammarAccess.getDeclarationAccess().getVariAssignment_0_0(), "rule__Declaration__VariAssignment_0_0");
					put(grammarAccess.getDeclarationAccess().getObjAssignment_0_1(), "rule__Declaration__ObjAssignment_0_1");
					put(grammarAccess.getVarDeclAccess().getNameAssignment_1(), "rule__VarDecl__NameAssignment_1");
					put(grammarAccess.getVarDeclAccess().getExprAssignment_2_0_1(), "rule__VarDecl__ExprAssignment_2_0_1");
					put(grammarAccess.getVarDeclAccess().getValueAssignment_2_1_1(), "rule__VarDecl__ValueAssignment_2_1_1");
					put(grammarAccess.getObjDeclAccess().getTypeAssignment_0(), "rule__ObjDecl__TypeAssignment_0");
					put(grammarAccess.getObjDeclAccess().getNameAssignment_1(), "rule__ObjDecl__NameAssignment_1");
					put(grammarAccess.getObjDeclAccess().getAttrAssignment_2_0_1(), "rule__ObjDecl__AttrAssignment_2_0_1");
					put(grammarAccess.getObjDeclAccess().getValueAssignment_2_1_1(), "rule__ObjDecl__ValueAssignment_2_1_1");
					put(grammarAccess.getAnimBlockAccess().getNameAssignment_1(), "rule__AnimBlock__NameAssignment_1");
					put(grammarAccess.getAnimBlockAccess().getTypeAssignment_3(), "rule__AnimBlock__TypeAssignment_3");
					put(grammarAccess.getAnimBlockAccess().getObjNameAssignment_4(), "rule__AnimBlock__ObjNameAssignment_4");
					put(grammarAccess.getAnimBlockAccess().getStmtAssignment_6(), "rule__AnimBlock__StmtAssignment_6");
					put(grammarAccess.getEventBlockAccess().getKeyAssignment_1(), "rule__EventBlock__KeyAssignment_1");
					put(grammarAccess.getEventBlockAccess().getStmtAssignment_2(), "rule__EventBlock__StmtAssignment_2");
					put(grammarAccess.getStatementBlockAccess().getStmtAssignment_1_1(), "rule__StatementBlock__StmtAssignment_1_1");
					put(grammarAccess.getForStmtAccess().getAss1Assignment_2(), "rule__ForStmt__Ass1Assignment_2");
					put(grammarAccess.getForStmtAccess().getExprAssignment_3(), "rule__ForStmt__ExprAssignment_3");
					put(grammarAccess.getForStmtAccess().getAss2Assignment_5(), "rule__ForStmt__Ass2Assignment_5");
					put(grammarAccess.getForStmtAccess().getStmtAssignment_7(), "rule__ForStmt__StmtAssignment_7");
					put(grammarAccess.getIfStmtAccess().getExprAssignment_2(), "rule__IfStmt__ExprAssignment_2");
					put(grammarAccess.getIfStmtAccess().getStmtAssignment_4(), "rule__IfStmt__StmtAssignment_4");
					put(grammarAccess.getIfStmtAccess().getElseAssignment_5(), "rule__IfStmt__ElseAssignment_5");
					put(grammarAccess.getElseStmtAccess().getStmtAssignment_1(), "rule__ElseStmt__StmtAssignment_1");
					put(grammarAccess.getAssStmtAccess().getVarAssignment_0(), "rule__AssStmt__VarAssignment_0");
					put(grammarAccess.getAssStmtAccess().getExprAssignment_2(), "rule__AssStmt__ExprAssignment_2");
					put(grammarAccess.getAssStmt2Access().getVarAssignment_0(), "rule__AssStmt2__VarAssignment_0");
					put(grammarAccess.getAssStmt2Access().getExprAssignment_2(), "rule__AssStmt2__ExprAssignment_2");
					put(grammarAccess.getAttrListAccess().getAttrAssignment_1_0(), "rule__AttrList__AttrAssignment_1_0");
					put(grammarAccess.getAttrListAccess().getAttrAssignment_1_1_1(), "rule__AttrList__AttrAssignment_1_1_1");
					put(grammarAccess.getAttrAssAccess().getNameAssignment_0(), "rule__AttrAss__NameAssignment_0");
					put(grammarAccess.getAttrAssAccess().getExprAssignment_2(), "rule__AttrAss__ExprAssignment_2");
					put(grammarAccess.getExprAccess().getConjAssignment_0(), "rule__Expr__ConjAssignment_0");
					put(grammarAccess.getExprAccess().getConjAssignment_1_1(), "rule__Expr__ConjAssignment_1_1");
					put(grammarAccess.getConjAccess().getRelatAssignment_0(), "rule__Conj__RelatAssignment_0");
					put(grammarAccess.getConjAccess().getRelatAssignment_1_1(), "rule__Conj__RelatAssignment_1_1");
					put(grammarAccess.getRelatAccess().getAddAssignment_0(), "rule__Relat__AddAssignment_0");
					put(grammarAccess.getRelatAccess().getAddAssignment_1_1(), "rule__Relat__AddAssignment_1_1");
					put(grammarAccess.getAddAccess().getMultAssignment_0(), "rule__Add__MultAssignment_0");
					put(grammarAccess.getAddAccess().getMultAssignment_1_1(), "rule__Add__MultAssignment_1_1");
					put(grammarAccess.getMultAccess().getUnaryAssignment_0(), "rule__Mult__UnaryAssignment_0");
					put(grammarAccess.getMultAccess().getUnaryAssignment_1_1(), "rule__Mult__UnaryAssignment_1_1");
					put(grammarAccess.getUnaryAccess().getAtomAssignment_1(), "rule__Unary__AtomAssignment_1");
					put(grammarAccess.getAtomAccess().getValueAssignment_0(), "rule__Atom__ValueAssignment_0");
					put(grammarAccess.getAtomAccess().getVar1Assignment_1_0(), "rule__Atom__Var1Assignment_1_0");
					put(grammarAccess.getAtomAccess().getVar2Assignment_1_1_1(), "rule__Atom__Var2Assignment_1_1_1");
					put(grammarAccess.getAtomAccess().getExprAssignment_2_1(), "rule__Atom__ExprAssignment_2_1");
					put(grammarAccess.getVarAccess().getNameAssignment_0(), "rule__Var__NameAssignment_0");
					put(grammarAccess.getVarAccess().getExprAssignment_1_0_1(), "rule__Var__ExprAssignment_1_0_1");
					put(grammarAccess.getVarAccess().getSubnameAssignment_1_0_3_1(), "rule__Var__SubnameAssignment_1_0_3_1");
					put(grammarAccess.getVarAccess().getSubnameAssignment_1_1_1(), "rule__Var__SubnameAssignment_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.mgpl.ui.contentassist.antlr.internal.InternalMgplDSLParser typedParser = (org.xtext.mgpl.ui.contentassist.antlr.internal.InternalMgplDSLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MgplDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MgplDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
